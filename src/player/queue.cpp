#include "queue.h"

using player::QueueItem;
using player::File;
using player::Playlist;

// =====================================================================================================================
File::File(const std::shared_ptr<library::File>& f)
    : m_file(f)
{
}

// =====================================================================================================================
QueueItem::Type File::type() const
{
    return FILE;
}

// =====================================================================================================================
void File::get(std::vector<int>&)
{
}

// =====================================================================================================================
void File::set(std::vector<int>&)
{
}

// =====================================================================================================================
bool File::isValid() const
{
    return true;
}

// =====================================================================================================================
void File::reset()
{
}

// =====================================================================================================================
bool File::prev()
{
    return false;
}

// =====================================================================================================================
bool File::next()
{
    return false;
}

// =====================================================================================================================
const std::shared_ptr<library::File>& File::file() const
{
    return m_file;
}

// =====================================================================================================================
std::shared_ptr<QueueItem> File::clone() const
{
    return std::make_shared<File>(m_file);
}

// =====================================================================================================================
std::vector<std::shared_ptr<QueueItem>> File::items() const
{
    return std::vector<std::shared_ptr<QueueItem>>();
}

// =====================================================================================================================
Playlist::Playlist()
    : m_index(-1)
{
}

// =====================================================================================================================
void Playlist::add(const std::shared_ptr<library::File>& f)
{
    m_items.push_back(std::make_shared<File>(f));
}

// =====================================================================================================================
QueueItem::Type Playlist::type() const
{
    return PLAYLIST;
}

// =====================================================================================================================
void Playlist::get(std::vector<int>& i)
{
    i.push_back(m_index);

    if (isValid())
	m_items[m_index]->get(i);
}

// =====================================================================================================================
void Playlist::set(std::vector<int>& i)
{
    m_index = i.front();
    i.erase(i.begin());

    if (isValid())
	m_items[m_index]->set(i);
}

// =====================================================================================================================
bool Playlist::isValid() const
{
    return m_index >= 0 && m_index < static_cast<int>(m_items.size());
}

// =====================================================================================================================
void Playlist::reset()
{
    m_index = 0;

    if (!m_items.empty())
	m_items[0]->reset();
}

// =====================================================================================================================
bool Playlist::prev()
{
    if (m_index <= 0)
	return false;

    --m_index;
    m_items[m_index]->reset();

    return true;
}

// =====================================================================================================================
bool Playlist::next()
{
    if (m_items.empty() || m_index == static_cast<int>(m_items.size()) - 1)
	return false;

    ++m_index;
    m_items[m_index]->reset();

    return true;
}

// =====================================================================================================================
const std::shared_ptr<library::File>& Playlist::file() const
{
    return m_items[m_index]->file();
}

// =====================================================================================================================
std::shared_ptr<QueueItem> Playlist::clone() const
{
    std::shared_ptr<Playlist> pl = std::make_shared<Playlist>();

    pl->m_index = m_index;

    for (const auto& item : m_items)
	pl->m_items.push_back(item->clone());

    return pl;
}

// =====================================================================================================================
std::vector<std::shared_ptr<QueueItem>> Playlist::items() const
{
    return m_items;
}
